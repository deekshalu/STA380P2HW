# Load the Wine dataset

import pandas as pd
df_wine = pd.read_csv('/Users/deebee/Desktop/school/texas msba/machine learning/wine.csv')

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.cluster import KMeans

# Display the first few rows of the dataframe
print(df_wine.head())

# Check for missing values
print(df_wine.isnull().sum())

# Extract the features and labels
features = df_wine.drop(columns=['color', 'quality'])
labels_type = df_wine['color']
labels_quality = df_wine['quality']

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(features)

# Apply PCA
pca = PCA(n_components=2)
pca_result = pca.fit_transform(X_scaled)

df_wine['PCA1'] = pca_result[:, 0]
df_wine['PCA2'] = pca_result[:, 1]

# Visualize PCA result by wine type
plt.figure(figsize=(10, 6))
sns.scatterplot(x='PCA1', y='PCA2', hue=labels_type, data=df_wine, palette='viridis')
plt.title('PCA of Wine Data (colored by Type)')
plt.xlabel('PCA1')
plt.ylabel('PCA2')
plt.show()

# Visualize PCA result by wine quality
plt.figure(figsize=(10, 6))
sns.scatterplot(x='PCA1', y='PCA2', hue=labels_quality, data=df_wine, palette='viridis')
plt.title('PCA of Wine Data (colored by Quality)')
plt.xlabel('PCA1')
plt.ylabel('PCA2')
plt.show()

# Apply t-SNE
tsne = TSNE(n_components=2, random_state=42)
tsne_result = tsne.fit_transform(X_scaled)

df_wine['TSNE1'] = tsne_result[:, 0]
df_wine['TSNE2'] = tsne_result[:, 1]

# Visualize t-SNE result by wine type
plt.figure(figsize=(10, 6))
sns.scatterplot(x='TSNE1', y='TSNE2', hue=labels_type, data=df_wine, palette='viridis')
plt.title('t-SNE of Wine Data (colored by Type)')
plt.xlabel('TSNE1')
plt.ylabel('TSNE2')
plt.show()

# Visualize t-SNE result by wine quality
plt.figure(figsize=(10, 6))
sns.scatterplot(x='TSNE1', y='TSNE2', hue=labels_quality, data=df_wine, palette='viridis')
plt.title('t-SNE of Wine Data (colored by Quality)')
plt.xlabel('TSNE1')
plt.ylabel('TSNE2')
plt.show()

# Apply K-Means clustering
kmeans = KMeans(n_clusters=2, random_state=42)
kmeans_result = kmeans.fit_predict(X_scaled)

df_wine['Cluster'] = kmeans_result

# Visualize K-Means result by wine type
plt.figure(figsize=(10, 6))
sns.scatterplot(x='PCA1', y='PCA2', hue='Cluster', style=labels_type, data=df_wine, palette='viridis')
plt.title('K-Means Clustering of Wine Data (PCA-colored by Cluster, shape by Type)')
plt.xlabel('PCA1')
plt.ylabel('PCA2')
plt.show()

# Visualize K-Means result by wine quality
plt.figure(figsize=(10, 6))
sns.scatterplot(x='PCA1', y='PCA2', hue='Cluster', style=labels_quality, data=df_wine, palette='viridis')
plt.title('K-Means Clustering of Wine Data')